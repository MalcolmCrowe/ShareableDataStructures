create schema /ldbc
[create graph type /ldbc/finBenchMark  { 
node Person {id::int,name::string,isBlocked::boolean, 
createTime::timestamp,gender::string,birthday::date,country::string,
city::string},
node Account {id::int,createTime::timestamp,isBlocked::boolean, 
type::string,nickname::string,phoneNumber::string,email::string, 
freqLoginType::string,lastLoginTime::timestamp,accountLevel::string},
node Medium {id::int,type::string,isBlocked::boolean,
createTime::timestamp,lastLoginTime::timestamp,riskLevel::string}, 
node Company{id::int,name::string,isBlocked::boolean, 
createTime::timestamp,country::string,city::string,
business::string,description::string, url::string}, 
node Loan {id::int,loanAmount::decimal,balance::decimal,
createTime::timestamp,usage::string,interestRate::decimal}, 
directed edge Transfer {amount::decimal,createTime::timestamp,
ordernumber::string,comment::string,payType::string, 
goodsType::string} connecting (Account to Account), 
directed edge Withdraw {createTime::timestamp,amount::decimal}
connecting (Account to Account),
directed edge Repay {createTime::timestamp,amount::decimal} connecting
	(Account to Loan),
directed edge Deposit {createTime::timestamp,amount::decimal} connecting (Loan
to Account),
directed edge SignIn {createTime::timestamp,location::string} 
connecting (Medium to Account),
directed edge Invest {createTime::timestamp,ratio::decimal} 
connecting (Person|Company to Company) cardinality (1),
directed edge Apply {createTime::timestamp,organization::string} 
connecting (Person|Company to Loan) cardinality (1),
directed edge Guarantee {createTime::timestamp,relationship::string} 
connecting (Person|Company to Person|Company) cardinality (1),
directed edge Own {createTime::timestamp} 
connecting (Person|Company to Account) cardinality(1)}]
[CREATE PROCEDURE ComplexRead1(id1 int,startTime timestamp,endTime timestamp,truncationLimit int,truncationOrder string)
MATCH 
truncating (transfer (truncationOrder)=truncationLimit) 
trail p=(m:Medium{isBlocked:true})
   	-[:signIn where createTime>startTime and createTime<endTime]->
    		(:Account{id:otherId}) [()
-[x:transfer where createTime >startTime and createTime<endTime
and (cardinality(p) =0 or 
p.x[cardinality(p)-1].createTime<createtime)
      ]->()]{1,3} (:Account{id:id1}) 
RETURN 
otherId, 
(cardinality(p)-3)/2 as accountDistance, 
m.id as mediumId, 
m.type as mediumType 
order by (accountDistance,otherId,mediumId)]
[CREATE PROCEDURE ComplexRead2(id1 int, startTime timestamp, endTime timestamp, truncationLimit int, truncationOrder string)
MATCH 
truncating (transfer (truncationOrder)=truncationLimit)
trail p=(:Person{id:id1})-[:own]->(:Account)
[()<-[x:transfer 
where createTime >startTime and createTime <endTime
and (cardinality(p) =0
or p.x[cardinality(p)-1].createTime<createtime)
]-()]{1,3} (:Account{id:otherId})<-[:deposit]-(a:Loan) 
return 
otherId, 
sum (a.loanAmount) as sumLoanAmount, 
sum (a.balance) as sumLoanBalance,
count(a)
group by otherId
order by (sumLoanAmount desc,otherId)]
[CREATE PROCEDURE ComplexRead3(id1 int, id2 int, startTime timestamp, endTime timestamp) 
MATCH 
shortest p=(:Account{id:id1}) 
[()-[x:transfer 
where createTime >startTime and createTime <endTime 
and (cardinality(p)=0 or 
p.x[cardinality(p)-1].createTime<createtime)]->()]+ 
(:Account{id:id2}) 
RETURN min(cardinality(p)-4) as shortestPathLength]
[CREATE PROCEDURE ComplexRead4 (id1 int, id2 int, startTime timestamp, endTime timestamp)
MATCH 
(src:Account{id:id1})
-[:transfer 
where createTime>startTime and createTime<endTime]-> (dst:Account{id:id2}),
(:Account{id:otherId})
-[:transfer {amount:amt2} 
where createTime>startTime and createTime<endTime]->
(src:Account{id:id2}),
(dst:Account{id:id1})
-[:transfer {amount:amt3} 
where createTime>startTime and createTime<endTime]-> (:Account{id:otherId}) 
return 
count(amt2) as numEdge2, 
sum(amt2) as sumEdge2Amount, 
max(amt2) as maxEdge2Amount, 
count(amt3) as numEdge3, 
sum(amt3) as sumEdge3Amount, 
max(amt3) as maxEdge3Amount, 
otherId 
group by otherId 
order by (sumEdge2Amount desc, sumEdge3Amount desc, otherId)]
[CREATE PROCEDURE ComplexRead5(id1 int, startTime timestamp,endTime timestamp,truncationLimit int, truncationOrder string) 
MATCH 
truncating (transfer (truncationOrder)=truncationLimit) 
trail p=(:Account{id:id1}) 
[()-[x:transfer 
where createTime>startTime and createTime<endTime and (cardinality(p)=0 or 
p.x[cardinality(p)-1].createTime<createtime)]->()]{1,3} 
(:Account{id:id2}) 
order by cardinality(p) desc]
[CREATE PROCEDURE ComplexRead6(id1 int, threshold1 decimal, threshold2 decimal, startTime timestamp, endTime timestamp, truncationLimit int, truncationOrder string)
MATCH 
truncating (transfer (truncationOrder)=truncationLimit)
(:Account{id:id1,type:'card'})
<-[:withdrawal {amount:amt2} 
where createTime>startTime and createTime<endTime 
and amt2>threshold2]-(mid:Account)
<-[:transfer {amount:amt1} 
where createTime>startTime and createTime<endTime 
and amt1>threshold1 
and count(amt1)>3]-(:Account)
return 
sum(amt1) as sumEdge1Ammount, 
sum(amt2) as sumEdge2Amount, 
mid.id as midId group by midId 
order by (sumEdge2Amount desc, midId)]
[CREATE PROCEDURE ComplexRead7(id1 int, threshold decimal, startTime timestamp, endTime timestamp, truncationLimit int, truncationOrder string)
MATCH 
truncating (transfer (truncationOrder)=truncationLimit) (src:Account)-[:transfer{amount:amt1} 
where timestamp>startTime and timestamp<endTime 
and amt1>threshold]->(:Account{id:id1})
-[:transfer {amount:amt2} 
where createTime>startTime and createTime<endTime 
and amt2>threshold]->(dst:Account) 
return 
count(src) as numSrc,
count(dst) as numDst, 
case count(amt2) when 0 then -1 else sum(amt1)/sum(amt2) end
as inOutRatio]
[CREATE PROCEDURE ComplexRead8 (id1 int, threshold decimal, startTime timestamp, endTime timestamp, truncationLimit int, truncationOrder string) MATCH 
truncating (transfer (truncationOrder)=truncationLimit) 
trail p=(:Loan{id:id1})-[:deposit{amount:depAmt}]->(:Account)
[()-[x:transfer|withdraw {amount:amt} 
where createTime>startTime and createTime<endTime 
and (cardinality(p)=0 or amount>threshold* p.x[cardinality(p)-1].amount)]->(dst)]{1,3} (:Account) 
return 
cardinality(p)-2 as distanceFromLoan, 
dst.id as dstId, 
case count(amt) when 0 then -1 
else depAmt/sum(amt) end as ratio
order by (distanceFromLoan, ratio, dstId)]
[CREATE PROCEDURE ComplexRead9(id1 int, threshold decimal, startTime timestamp, endTime timestamp, truncationlimit int, truncationOrder string) 
MATCH 
truncating (transfer (truncationOrder)=truncationLimit)
  (:Account)-[e3:transfer 
where createTime>startTime and createTime<endTime]-> (a:Account{id:id1})-[e4:transfer 
where createTime>startTime and createTime<endTime]-> (:Account),
(:Loan)-[e1:deposit 
where createTime>startTime and createTime<endTime]->
(a)-[e2:repay 
where createTime>startTime and createTime<endTime]-> (:Loan) 
return 
sum(e1.amt)/sum(e2.amt) as ratioRepay, 
case count(e4) when 0 then -1 else sum(e1.amt)/sum(e4.amt) end
as ratioDeposit, 
case count(e4) when 0 then -1 else sum(e3.amt)/sum(e4.amt) end
as ratioTransfer]
[CREATE PROCEDURE ComplexRead10(pid1 int, pid2 int, startTime timestamp, endTime timestamp) 
MATCH 
(:Person{id:pid1})-[:invest 
where createTime>startTime and createTime<endTime]-> (a:Company),
(:Person{id:pid2})-[:invest 
where createTime>startTime and createTime<endTime]-> (b:Company) 
return 
cast(
cardinality(collect(a) multiset intersect collect(b))
/cardinality(collect(a) multiset union collect(b)) 
as decimal(5,3))
as jaccardSimilarity]
[CREATE PROCEDURE ComplexRead11(id1 int, startTime timestamp, endTime timestamp, truncationlimit int, truncationOrder string) MATCH 
truncating (transfer (truncationOrder)=truncationLimit)
 (p:Person)-[:apply]->(:Loan{id:lid,amount:amt}) 
where p in (MATCH 
(:Person{id:id1})
[()-[:guarantee 
where createTime>startTime and createTime<endTime]-> (q)]+ ())
return 
sum(amt) as sumLoanAmount, 
count (distinct lid) as numLoans]
[CREATE PROCEDURE ComplexRead12 (id1 int, startTime timestamp, endTime timestamp, truncationLimit int, truncationOrder string) 
MATCH 
truncating (transfer (truncationOrder)=truncationLimit)  (:Person{id:id1})-[:own]->(:Account)
[()-[:transfer{amount:amt} 
where createTime>startTime and createTime<endTime]-> (x:Account where exists
(MATCH(x)<-[:own]-(:Company)))]+() 
return 
sum(amt) as sumEdge2Amount, 
x.id as compAccountId 
group by x.id 
order by (sumEdge2Amount desc, compAccountId)]
CREATE PROCEDURE SimpleRead1 (id1 int) MATCH (x:Account{id:id1}) return x.createTime, x.isBlocked, x.type
[CREATE PROCEDURE SimpleRead2 (id1 int, startTime timestamp, endTime timestamp) 
MATCH 
(:Account)<-[:transfer{amount:amt1} 
where createTime>startTime and createTime<endTime]-(:Account{id:id1})-[:transfer{amount:amt2} 
where createTime>startTime and createTime<endTime]-> 
(:Account) 
return 
sum(amt1) as sumEdge1Ammount, 
max(amt1) as maxEdge1Amount, 
count(amt1) as numEdge1, 
sum(amt2) as sumEdge2Amount, 
max(amt2) as maxEdge2Amount, 
count(amt2) as numEdge2]
[CREATE PROCEDURE SimpleRead3 (id1 int,threshold decimal, startTime timestamp,endTime timestamp)
MATCH 
(:Account{id:id1})<-[:transfer {amount:amtb} 
where createTime>startTime and createTime<endTime]-(:Account{isBlocked:true}), 
(:Account{id:id})<-[:transfer {amount:amt} 
where createTime>startTime and createTime<endTime]-(:Account) 
RETURN 
case when count(amt)=0 then -1 else sum(amtb)/sum(amt) end
as ratioTransfer]
[CREATE PROCEDURE SimpleRead4 (id1 int,threshold decimal,startTime timestamp,endTime timestamp) 
MATCH (:Account{id:id1})-[:transfer{amount:amt} 
where amt>=threshold and createTime>startTime and createTime <endTime]->(:Account) return 
count(amt) as numEdges, 
sum(amt) as sumAmount]
[CREATE PROCEDURE SimpleRead5(id1 int, threshold decimal, startTime timestamp, endTime timestamp) MATCH (:account{id:id1})
<-[:transfer{amount:amt} 
where amt>=threshold and createTime>startTime and createTime<endTime]-(:Account)
return 
count(amt) as numEdges, 
sum(amt) as sumAmount]
[CREATE PROCEDURE SimpleRead6 (id1 int, startTime timestamp, endTime timestamp) MATCH 
(:Account{id:id1})<-[:transfer 
where createTime>startTime and createTime<endTime]-(:Account{id:mid})
<-[:transfer 
where createTime>startTime and createTime<endTime]-(:Account{id:dst})
RETURN mid,collect(dst) group by mid]
[CREATE PROCEDURE Write1 (id1 int, name1 string, block1 boolean) CREATE (:Person{id:id1,name:name1,isBlocked:block1,createTime:current_time})]
[CREATE PROCEDURE Write2 (id1 int, name1 string, block1 boolean) 
CREATE (:Company{id:id1,name:name1,isBlocked:block1, createTime:current_time})]
[CREATE PROCEDURE Write3 (id1 int, type1 string, block1 boolean) 
CREATE (:Medium{id:id1,type:type1,isBlocked:block1, createTime:current_time })]
[CREATE PROCEDURE Write4 (id1 int, accountId1 id, time1 timestamp, type1 string, blocked boolean) 
MATCH (p:Person{id:id1}) 
CREATE (p)-[:own]->
(:Account {id:accountid1, 
createTime:time1, 
type:type1, 
isBlocked:blocked})]
[CREATE PROCEDURE Write5 (id1 int, accountId1 int, time1 timestamp, blocked boolean, type1 string) 
MATCH (c:Company{id:id1}) 
CREATE (c)-[:own]->
(:Account {id:accountid1, 
createTime:time1, 
type:type1, 
isBlocked:blocked})]
[CREATE PROCEDURE Write6(id1 int, loanId int, amt decimal, bal decimal, time timestamp) 
MATCH (p:Person{id:id1}) 
CREATE (p)-[:apply {createTime:time}]-> 
(:Loan{id:loanId, 
loanAmount:amt, 
balance:bal})]
[CREATE PROCEDURE Write7 (id1 int, loanId int, amt decimal, bal decimal, time timestamp) 
MATCH (c:Company{id:id1}) 
CREATE (c)-[:apply {createTime:time}]-> 
(:Loan{id:loanId, loanAmount:amt, balance:bal})]
[CREATE PROCEDURE Write8 (id1 int, companyId int, time1 timestamp, ratio1 decimal) 
MATCH (p:Person{id:id1}),(c:Company{id:companyId})
CREATE (p)-[:invest{createTime:time1,ratio:ratio1}]->(c)]
[CREATE PROCEDURE Write9 (id1 int, id2 int, time1 timestamp, ratio1 decimal) 
MATCH (c:Company{id:id1}),(d:Company{id:id2})
CREATE (c)-[:invest{createTime:time1, ratio:ratio1}]->(d)]
[CREATE PROCEDURE Write10(id1 int, id2 int, time1 timestamp) 
MATCH (p:Person{id:id1}),(q:Person{id:id2})
CREATE (p)-[:guarantee{createTime:time1 }]->(q)]
[CREATE PROCEDURE Write11 (id1 int, id2 int, time1 timestamp) 
MATCH (c:Company{id:id1}),(d:Company{id:id2})
CREATE (c)-[:guarantee{createTime:time1 }]->(d)]
[CREATE PROCEDURE Write12 (id1 int, id2 int, time1 timestamp, amt decimal) 
MATCH (a:Account{id:id1}),(b:Account{id:id2})
CREATE (a)-[:transfer{createTime:time1, amount:amt}]->(b)]
[CREATE PROCEDURE Write13 (id1 int, id2 int, time1 timestamp, amt decimal) 
MATCH (a:Account{id:id1}),(b:Account{id:id2})
CREATE (a)-[:withdraw{createTime:time1, amount:amt}]->(b)]
[CREATE PROCEDURE Write14 (id1 int, id2 int, time1 timestamp, amt decimal)
MATCH (a:Account{id:id1}),(b:Loan{id:id2})
CREATE (a)-[:repay{createTime:time1, amount:amt}]->(b)]
[CREATE PROCEDURE Write15(id1 int, id2 int, time1 timestamp, amt decimal) 
MATCH (a:Loan{id:id1}),(b:Account{id:id2})
CREATE (a)-[:deposit{createTime:time1, amount:amt}]->(b)]
[CREATE PROCEDURE Write16 (id1 int, id2 int, time1 timestamp) 
MATCH (m:Medium{id:id1}),(a:Account{id:id2})
CREATE (m)-[:signIn{createTime:time1 }]->(a)]
CREATE PROCEDURE Write17 (id1 int) MATCH (a:Account{id:id1}) detach delete a
CREATE PROCEDURE Write18 (id1 int) MATCH(a:Account{id:id1}) set a.isBlocked = true
CREATE PROCEDURE Write19 (id1 int) MATCH(p:Person{id:id1}) set p.isBlocked = true
[CREATE PROCEDURE ReadWrite1(srcId int, dstId int, time timestamp,
	amt decimal, startTime timestamp, endTime timestamp)
MATCH (src:Account{id:srcId,isBlocked:false}),
(dst:Account{id:dstId,isBlocked:false})
if exists (MATCH trail p=(dst) [()-[x:transfer 
where createTime>startTime and createTime<endTime 
and (cardinality(p)=0 
or p.x[cardinality(p)-1].createTime<createtime)]->()]+(src))
	then set src.isBlocked=true; set dst.isBlocked=true 
	else CREATE(src)-[:transfer{createTime:current_time,amount:amt}]->(dst)
end if]
[CREATE PROCEDURE ReadWrite2(srcId int, dstId int, time1 timestamp, 
amt decimal, amountThreshold decimal, startTime timestamp, endTime timestamp, ratioThreshold decimal, truncationLimit int, truncationOrder string)
MATCH (src:Account{id:srcId,isBlocked:false}),
(dst:Account{id:dstId,	isBlocked:false})
 if exists(MATCH
  truncating (transfer (truncationOrder)=truncationLimit)
  (:Account)-[:transfer{amount:amtIn} 
where createTime>startTime and createTime<endTime]->(src)
-[:transfer{amount:amtOut} 
where createTime>startTime and createTime<endTime]-> (:Account)
  return sum(amtOut)<>0 and sum(amtIn)/sum(amtOut)>ratioThreshold) 
| (:Account)-[:transfer{amount:amtIn} 
where createTime>startTime and createTime<endTime]->(dst)
-[:transfer{amount:amtOut} 
where createTime>startTime and createTime<endTime]-> (:Account)
  return sum(amtOut)<>0 and sum(amtIn)/sum(amtOut)>ratioThreshold)
 then 
       set src.isBlocked = true; 
       set dst.isBlocked = true
 else
	  CREATE(src)-[:transfer{createTime:time1,amount:amt}]->(dst)
 end if]
[CREATE PROCEDURE ReadWrite3(srcId int, dstId int, time timestamp, threshold decimal, startTime timestamp, endTime timestamp, truncationLimit int, truncationOrder string) 
MATCH(src:Person{id:srcId,isBlocked:false}), 
(dst:Person{id:dstId,isBlocked:false})
   if exists (MATCH 
truncating (transfer (truncationOrder)=truncationLimit)
   (p:Person)-[:apply]->(:Loan{amount:amt}) 
 where p in (MATCH (src)[()-[:guarantee where createTime>startTime and createTime<endTime]->(q)]+() return sum(amt)>threshold))
   then 
set src.isBlocked = true; 
set dst.isBlocked=true
   else
	CREATE(src)-[:guarantee{createTime:current_time}]->(dst)
   end if]
