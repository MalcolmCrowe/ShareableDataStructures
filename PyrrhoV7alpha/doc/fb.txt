create schema /ldbc
[create graph type /ldbc/finBenchMark  { 
node Person {id::int primary key,name::string,isBlocked::boolean, 
createTime::timestamp,gender::string,birthday::date,country::string,
city::string},
node Account {id::int primary key,createTime::timestamp,isBlocked::boolean, 
type::string,nickname::string,phoneNumber::string,email::string, 
freqLoginType::string,lastLoginTime::timestamp,accountLevel::string},
node Medium {id::int primary key,type::string,isBlocked::boolean,
createTime::timestamp,lastLoginTime::timestamp,riskLevel::string}, 
node Company{id::int primary key,name::string,isBlocked::boolean, 
createTime::timestamp,country::string,city::string,
business::string,description::string, url::string}, 
node Loan {id::int primary key,loanAmount::float64,balance::float64,
createTime::timestamp,usage::string,interestRate::float32}, 
directed edge Transfer {amount::float64,createTime::timestamp,
ordernumber::string,comment::string,payType::string, 
goodsType::string} connecting (Account to Account), 
directed edge Withdraw {createTime::timestamp,amount::float64}
connecting (Account to Account),
directed edge Repay {createTime::timestamp,amount::float64} connecting
	(Account to Loan),
directed edge Deposit {createTime::timestamp,amount::float64} connecting (Loan
to Account),
directed edge SignIn {createTime::timestamp,location::string} 
connecting (Medium to Account),
directed edge Invest {createTime::timestamp,ratio::float64} 
connecting (Person|Company to Company) cardinality (1),
directed edge Apply {createTime::timestamp,organization::string} 
connecting (Person|Company to Loan) cardinality (1),
directed edge Guarantee {createTime::timestamp,relationship::string} 
connecting (Person|Company to Person|Company) cardinality (1),
directed edge Own {createTime::timestamp} 
connecting (Person|Company to Account) cardinality(1)}]
[CREATE FUNCTION ComplexRead1(id1 int,startTime timestamp,endTime timestamp,truncationLimit int,truncationOrder string)
returns table(otherId int,accountDistance int,mediumId int)
MATCH 
truncating (transfer (truncationOrder)=truncationLimit) 
trail (m:Medium{isBlocked:true})
   	-[:signIn where createTime>startTime and createTime<endTime]->
    		(:Account{id:otherId}) [()
-[:transfer{createTime:x} where createTime >startTime and createTime<endTime
and (cardinality(x)=1 or x[cardinality(x)-2]<createtime)
      ]->()]{1,3} (:Account{id:id1}) 
RETURN 
otherId, 
cardinality(x) as accountDistance, 
m.id as mediumId, 
m.type as mediumType 
order by (accountDistance,otherId,mediumId)]
[CREATE FUNCTION ComplexRead2(id1 int, startTime timestamp, endTime timestamp, truncationLimit int, truncationOrder string)
returns table(otherId int,sumLoanBalance float64,otherId int)
MATCH 
truncating (transfer (truncationOrder)=truncationLimit)
trail (:Person{id:id1})-[:own]->(:Account)
[()<-[:transfer{createTime:c} 
where createTime >startTime and createTime <endTime
and (cardinality(c)=1
or c[cardinality(c)-2]<createtime)
]-()]{1,3} (:Account{id:otherId})
<-[:deposit]-(:Loan{id:la,amount:amt,balance:bal}) 
return 
otherId, 
sum (amt) as sumLoanAmount, 
sum (bal) as sumLoanBalance,
count(distinct la)
group by otherId
order by (sumLoanAmount desc,otherId)]
[CREATE FUNCTION ComplexRead3(id1 int, id2 int, startTime timestamp, endTime timestamp) returns int
MATCH 
shortest (b:Account{id:id2}), (:Account{id:id1}) 
[()-[:transfer{createTime:x} 
where createTime >startTime and createTime <endTime 
and (cardinality(x)=1 or x[cardinality(x)-2]<createtime)]->()]+ (b) 
RETURN cardinality(x) as shortestPathLength]
[CREATE FUNCTION ComplexRead4 (id1 int, id2 int, startTime timestamp, endTime timestamp)
returns table(otherId int, numEdge2 int, sumEdge2Amount float64, maxEdge2Amount float64, numEdge3 int, sumEdge3Amount float64, maxEdge3Amount float64)
MATCH 
(src:Account{id:id1})
-[:transfer 
where createTime>startTime and createTime<endTime]-> (dst:Account{id:id2})
-[:transfer {amount:amt2} 
where createTime>startTime and createTime<endTime]->
(:Account{id:otherId})
-[:transfer {amount:amt3} 
where createTime>startTime and createTime<endTime]-> (src) 
return 
count(amt2) as numEdge2, 
sum(amt2) as sumEdge2Amount, 
max(amt2) as maxEdge2Amount, 
count(amt3) as numEdge3, 
sum(amt3) as sumEdge3Amount, 
max(amt3) as maxEdge3Amount, 
otherId 
group by otherId 
order by (sumEdge2Amount desc, sumEdge3Amount desc, otherId)]
[CREATE FUNCTION ComplexRead5(id1 int, startTime timestamp,endTime timestamp,truncationLimit int, truncationOrder string) returns table (p path) 
MATCH 
truncating (transfer (truncationOrder)=truncationLimit) 
trail p=(:Account{id:id1}) 
[()-[:transfer{createTime:c} 
where createTime>startTime and createTime<endTime and (cardinality(c)=1 or 
c[cardinality(c)-2]<createtime)]->()]{1,3} 
(:Account{id:id2}) 
return p order by cardinality(p)]
[CREATE FUNCTION ComplexRead6(id1 int, threshold1 float64, threshold2 float64, startTime timestamp, endTime timestamp, truncationLimit int, truncationOrder string) returns table(midId int, sumEdge1Amount float64, sumEdge2Amount float64)
MATCH 
truncating ((truncationOrder)=truncationLimit)
(:Account{id:id1})<-[:withdrawal {amount:amt2,createtime:y } 
where createTime>startTime and createTime<endTime 
    and amount>threshold2]-(mid:Account)
MATCH (mid)<-[:transfer {amount:amt1,createtime:x} 
where createTime>startTime and createTime<endTime 
    and x<y and amount>threshold1]-(:Account)
return sum(amt1) as sumEdge1Amount, sum(amt2) as sumEdge2Amount, 
		 mid.id as midId where count(amt1)>3 group by midId
 order by (sumEdge2Amount desc, midId)]
[CREATE FUNCTION ComplexRead7(id1 int, threshold float64, startTime timestamp, endTime timestamp, truncationLimit int, truncationOrder string)
returns table(numSrc int, numDst int, inOutRatio float64)
MATCH 
truncating (transfer (truncationOrder)=truncationLimit) (src:Account)-[:transfer{amount:amt1,createtime:x} 
where timestamp>startTime and timestamp<endTime 
and amt1>threshold]->(:Account{id:id1})
-[:transfer {amount:amt2,createtime:y} 
where createTime>startTime and createTime<endTime 
and x<y and amt2>threshold]->(dst:Account) 
return 
count(src) as numSrc,
count(dst) as numDst, 
case count(amt2) when 0 then -1.0 else sum(amt1)/sum(amt2) end
as inOutRatio]
[CREATE FUNCTION ComplexRead8 (id1 int, threshold float64, startTime timestamp, endTime timestamp, truncationLimit int, truncationOrder string) 
returns table(minDistanceFromLoan int, damt float64, dstId int, ratio float64) 
MATCH truncating ((truncationOrder)=truncationLimit) (:Loan{id:id1})-[:deposit{amount:damt}]->()
  [()-[:transfer|withdraw {amount:amt,createTime:x} where createTime>startTime and createTime<endTime 
    and (cardinality(x)=1 or (amount >= amt[cardinality(amt)-2]*threshold and createTime>x[cardinality(x)-2]))
  ]->()]{1,3} (:Account{id:dstId}) 
    return min(cardinality(amt)+1) as distancefromLoan, damt, dstId, sum(amt[cardinality(amt)-1]/damt) as ratio 
 group by (damt,dstId)]
[CREATE FUNCTION ComplexRead9(id1 int, threshold float64, startTime timestamp, endTime timestamp, truncationlimit int, truncationOrder string) 
returns table(ratioRepay float64, ratioDeposit float64, ratioTransfer float64)
MATCH 
truncating (transfer (truncationOrder)=truncationLimit)
  (:Account)-[:transfer{amount:e3} 
where createTime>startTime and createTime<endTime]-> (a:Account{id:id1})-[:transfer {amount:e4}
where createTime>startTime and createTime<endTime]-> (:Account),
(:Loan)-[:deposit {amount:e1} 
where createTime>startTime and createTime<endTime]->
(a)-[:repay {amount:e2}
where createTime>startTime and createTime<endTime]-> (:Loan) 
return 
sum(e1)/sum(e2) as ratioRepay, 
case count(e4) when 0 then -1.0 else sum(e1)/sum(e4) end
as ratioDeposit, 
case count(e4) when 0 then -1.0 else sum(e3)/sum(e4) end
as ratioTransfer]
[CREATE FUNCTION ComplexRead10(pid1 int, pid2 int, startTime timestamp, endTime timestamp) returns float64
MATCH 
(:Person{id:pid1})-[:invest 
where createTime>startTime and createTime<endTime]-> (:Company{id:a}),
(:Person{id:pid2})-[:invest 
where createTime>startTime and createTime<endTime]-> (:Company{id:b}) 
return 
cast(
cardinality(collect(a) multiset intersect collect(b))
/cardinality(collect(a) multiset union collect(b)) 
as float64(5,3))
as jaccardSimilarity]
[CREATE FUNCTION ComplexRead11(id1 int, startTime timestamp, endTime timestamp, truncationlimit int, truncationOrder string) 
returns table(sumLoanAmount float64,numLoans int)
MATCH truncating (guarantee (truncationOrder)=truncationLimit)
(:Person{id:id1})[()-[:guarantee where createTime>startTime and createTime<endTime]-> (:Person)]+ (p)
MATCH (p)-[:apply]->(:Loan{id:lid,amount:amt})
return 
sum(amt) as sumLoanAmount, 
count (distinct lid) as numLoans]
[CREATE FUNCTION ComplexRead12 (id1 int, startTime timestamp, endTime timestamp, truncationLimit int, truncationOrder string) 
returns table(companyId int,sumEdge2Amount float64)
MATCH 
truncating (transfer (truncationOrder)=truncationLimit)  
(:Person{id:id1})-[:own]->(:Account)
[()-[:transfer{amount:amt} 
where createTime>startTime and createTime<endTime]-> ()
<-[:own]-(:Company{id:c})]+() 
return 
sum(amt) as sumEdge2Amount, 
c as companyId
group by companyId
order by (sumEdge2Amount desc, companyId)]
[CREATE FUNCTION SimpleRead1 (id1 int) returns row(createtime timestamp,isBlocked boolean,accounttype string) 
MATCH (x:Account{id:id1}) return x.createTime, x.isBlocked, x.type]
[CREATE FUNCTION SimpleRead2 (id1 int, startTime timestamp, endTime timestamp) 
returns row(sumEdge1Amount float64, maxEdge1Amount float64, numEdge1 int, sumEdge2Amount float64, maxEdge2Amount float64, numEdge2 int)
MATCH 
(:Account)<-[:transfer{amount:amt1} 
where createTime>startTime and createTime<endTime]-(:Account{id:id1})-[:transfer{amount:amt2} 
where createTime>startTime and createTime<endTime]-> 
(:Account) 
return 
sum(amt1) as sumEdge1Ammount, 
max(amt1) as maxEdge1Amount, 
count(amt1) as numEdge1, 
sum(amt2) as sumEdge2Amount, 
max(amt2) as maxEdge2Amount, 
count(amt2) as numEdge2]
[CREATE FUNCTION SimpleRead3 (id1 int,threshold float64, startTime timestamp,endTime timestamp) returns float64
MATCH 
(:Account{id:id1})<-[:transfer {amount:amtb} 
where createTime>startTime and createTime<endTime]-(:Account{isBlocked:true}), 
(:Account{id:id})<-[:transfer {amount:amt} 
where createTime>startTime and createTime<endTime]-(:Account) 
RETURN 
case when count(amt)=0 then -1.0 else sum(amtb)/sum(amt) end
as ratioTransfer]
[CREATE FUNCTION SimpleRead4 (id1 int,threshold float64,startTime timestamp,endTime timestamp) 
returns row(numEdges int,sumAmount float64) 
MATCH (:Account{id:id1})-[:transfer{amount:amt} 
where amt>=threshold and createTime>startTime and createTime <endTime]->(:Account) return 
count(amt) as numEdges, 
sum(amt) as sumAmount]
[CREATE FUNCTION SimpleRead5(id1 int, threshold float64, startTime timestamp, endTime timestamp) 
returns row(numEdges int,sumAmount float64)
MATCH (:account{id:id1})
<-[:transfer{amount:amt} 
where amt>=threshold and createTime>startTime and createTime<endTime]-(:Account)
return 
count(amt) as numEdges, 
sum(amt) as sumAmount]
[CREATE FUNCTION SimpleRead6 (id1 int, startTime timestamp, endTime timestamp) returns int array 
MATCH 
(:Account{id:id1})<-[:transfer 
where createTime>startTime and createTime<endTime]-(:Account{id:mid})
<-[:transfer 
where createTime>startTime and createTime<endTime]-(:Account{id:dst})
RETURN mid,collect(dst) group by mid]
[CREATE PROCEDURE Write1 (id1 int, name1 string, block1 boolean) CREATE (:Person{id:id1,name:name1,isBlocked:block1,createTime:current_time})]
[CREATE PROCEDURE Write2 (id1 int, name1 string, block1 boolean) 
CREATE (:Company{id:id1,name:name1,isBlocked:block1, createTime:current_time})]
[CREATE PROCEDURE Write3 (id1 int, type1 string, block1 boolean) 
CREATE (:Medium{id:id1,type:type1,isBlocked:block1, createTime:current_time })]
[CREATE PROCEDURE Write4 (id1 int, accountId1 int, time1 timestamp, blocked boolean, type1 string) 
MATCH (p:Person{id:id1}) 
CREATE (p)-[:own]->
(:Account {id:accountid1, 
createTime:time1, 
type:type1, 
isBlocked:blocked})]
[CREATE PROCEDURE Write5 (id1 int, accountId1 int, time1 timestamp, blocked boolean, type1 string) 
MATCH (c:Company{id:id1}) 
CREATE (c)-[:own]->
(:Account {id:accountid1, 
createTime:time1, 
type:type1, 
isBlocked:blocked})]
[CREATE PROCEDURE Write6(id1 int, loanId int, amt float64, bal float64, time timestamp) 
MATCH (p:Person{id:id1}) 
CREATE (p)-[:apply {createTime:time}]-> 
(:Loan{id:loanId, 
loanAmount:amt, 
balance:bal})]
[CREATE PROCEDURE Write7 (id1 int, loanId int, amt float64, bal float64, time timestamp) 
MATCH (c:Company{id:id1}) 
CREATE (c)-[:apply {createTime:time}]-> 
(:Loan{id:loanId, loanAmount:amt, balance:bal})]
[CREATE PROCEDURE Write8 (id1 int, companyId int, time1 timestamp, ratio1 float64) 
MATCH (p:Person{id:id1}),(c:Company{id:companyId})
CREATE (p)-[:invest{createTime:time1,ratio:ratio1}]->(c)]
[CREATE PROCEDURE Write9 (id1 int, id2 int, time1 timestamp, ratio1 float64) 
MATCH (c:Company{id:id1}),(d:Company{id:id2})
CREATE (c)-[:invest{createTime:time1, ratio:ratio1}]->(d)]
[CREATE PROCEDURE Write10(id1 int, id2 int, time1 timestamp) 
MATCH (p:Person{id:id1}),(q:Person{id:id2})
CREATE (p)-[:guarantee{createTime:time1 }]->(q)]
[CREATE PROCEDURE Write11 (id1 int, id2 int, time1 timestamp) 
MATCH (c:Company{id:id1}),(d:Company{id:id2})
CREATE (c)-[:guarantee{createTime:time1 }]->(d)]
[CREATE PROCEDURE Write12 (id1 int, id2 int, time1 timestamp, amt float64) 
MATCH (a:Account{id:id1}),(b:Account{id:id2})
CREATE (a)-[:transfer{createTime:time1, amount:amt}]->(b)]
[CREATE PROCEDURE Write13 (id1 int, id2 int, time1 timestamp, amt float64) 
MATCH (a:Account{id:id1}),(b:Account{id:id2})
CREATE (a)-[:withdraw{createTime:time1, amount:amt}]->(b)]
[CREATE PROCEDURE Write14 (id1 int, id2 int, time1 timestamp, amt float64)
MATCH (a:Account{id:id1}),(b:Loan{id:id2})
CREATE (a)-[:repay{createTime:time1, amount:amt}]->(b)]
[CREATE PROCEDURE Write15(id1 int, id2 int, time1 timestamp, amt float64) 
MATCH (a:Loan{id:id1}),(b:Account{id:id2})
CREATE (a)-[:deposit{createTime:time1, amount:amt}]->(b)]
[CREATE PROCEDURE Write16 (id1 int, id2 int, time1 timestamp) 
MATCH (m:Medium{id:id1}),(a:Account{id:id2})
CREATE (m)-[:signIn{createTime:time1 }]->(a)]
[CREATE PROCEDURE Write17 (id1 int)  match (a:Account{id:id1}) 
{ MATCH (lo:Loan)-[:deposit]->(a) detach delete lo NEXT detach delete a }]
CREATE PROCEDURE Write18 (id1 int) MATCH(a:Account{id:id1}) set a.isBlocked = true
CREATE PROCEDURE Write19 (id1 int) MATCH(p:Person{id:id1}) set p.isBlocked = true
[CREATE PROCEDURE ReadWrite1(srcId int, dstId int, time timestamp,
	amt float64, startTime timestamp, endTime timestamp)
MATCH (src:Account{id:srcId,isBlocked:false}),
(dst:Account{id:dstId,isBlocked:false})
if exists (MATCH trail (dst) [()-[:transfer{createTime:x} 
where createTime>startTime and createTime<endTime 
and (cardinality(x)=1 or x[cardinality(x)-2]<createtime)]->()]+(src))
	then set src.isBlocked=true; set dst.isBlocked=true 
	else CREATE(src)-[:transfer{createTime:current_time,amount:amt}]->(dst)
end if]
[CREATE PROCEDURE ReadWrite2(srcId int, dstId int, time1 timestamp, 
amt float64, amountThreshold float64, startTime timestamp, endTime timestamp, ratioThreshold float64, truncationLimit int, truncationOrder string)
MATCH (src:Account{id:srcId,isBlocked:false}),
(dst:Account{id:dstId,	isBlocked:false})---
 CREATE(src)-[nw:transfer{createTime:time1,amount:amt}]->(dst)
	  LET found=false
     MATCH
truncating (transfer (truncationOrder)=truncationLimit)
(src)<-[:transfer{amount:srcIn} where amount>amountThreshold
	and createTime>startTime and createTime<endTime]-(),
(src)-[:transfer{amount:srcOut} where amount>amountThreshold
	and createTime>startTime and createTime<endTime]-> ()
      WHEN sum(srcOut)<>0 and sum(srcIn)/sum(srcOut)>ratioThreshold
       THEN set found=true
     WHEN not found
      THEN MATCH
 truncating (transfer (truncationOrder)=truncationLimit)
	 (dst)<-[:transfer{amount:dstIn} where amount>amountThreshold
	and createTime>startTime and createTime<endTime]-(),
 (dst)-[:transfer{amount:dstOut} where amount>amountThreshold
	and createTime>startTime and createTime<endTime]-> ()
      WHEN sum(dstOut)<>0 and sum(dstIn)/sum(dstOut)>ratioThreshold
      THEN set found=true
	WHEN found
	THEN {	  delete nw; 
       set src.isBlocked = true; 
       set dst.isBlocked = true}]
[CREATE PROCEDURE ReadWrite3(srcId int, dstId int, time timestamp, threshold float64, startTime timestamp, endTime timestamp, truncationLimit int, truncationOrder string) 
MATCH(src:Person{id:srcId,isBlocked:false}), 
(dst:Person{id:dstId,isBlocked:false})
   if exists (MATCH 
truncating (transfer (truncationOrder)=truncationLimit)
   (p:Person)-[:apply]->(:Loan{amount:amt}) 
 where p in (MATCH (src)[()-[:guarantee where createTime>startTime and createTime<endTime]->(q)]+() where sum(amt)>threshold))
   then 
set src.isBlocked = true; 
set dst.isBlocked = true
   else
	CREATE(src)-[:guarantee{createTime:current_time}]->(dst)
   end if]
