1:
create table A(B int,C int,D char,primary key(B,C))
insert into A values(2,3,'TwentyThree')
insert into A values(1,9,'Nineteen')
select * from A
update A set C=19 where C=9
select * from A
delete from A where C=19
insert into A(B,D) (select E.B,upper(E.D) from A E)
table A
2:
create table AA(B int,C char)
insert into AA(B) values(17)
insert into AA(C) values('BC')
insert into AA(C,B) values('GH',+67)
select * from AA
->[{B:17},{C:'BC'},{B:67,C:'GH'}]
select B from AA
->[{B:17},{B:67}]
select C as E from AA
->[{E:'BC'},{E:'GH'}]
select C from AA where B<20
->[]
select C from AA where B>20
->[{C:'GH'}]
select count(C) from AA
->[{COUNT:2}]
3:
create table b(c int primary key,d char)
insert into b values(45,'DE')
insert into b values(-23,'HC')
select * from b
select * from b where c=-23
4:
create table e(f int,g char,primary key(g,f))
insert into e values(23,'XC')
insert into e values(45,'DE')
select * from e
insert into e(g) values('DE')
select * from e
select count(f) from e where g='DE' and f<=45
5:
create table f(b int,c int)
insert into f values(17,15)
insert into f values(23,6)
select * from f
select b-3 as h,22 as g from f
select f.b as h,(c) from f
select b+3,d.c from f d
select (b as d,c) from f
-->[{Col0:(D=17,C=15)},{Col0:(D=23,C=6)}]
select * from f order by c
select * from f order by b desc
select * from f order by b+c
select sum(b) from f
select max(c),min(b) from f
select count(c) as d from f where b<20
6:
create table ta(b date,c interval hour to second,d boolean)
insert into ta values(date'2019-01-06T12:30:00',interval'02:00:00'hour to second,false)
select * from ta
create table td(e int,f int)
insert into td values(2,5),(4,6),(2,7),(6,8)
select distinct e from td
select avg(distinct e) from td
7:
create table TB(S char,D int,C int)
insert into TB values('Glasgow',2,43)
insert into TB values('Paisley',3,82)
insert into TB values('Glasgow',4,29)
select S,count(C) as occ,sum(C) as total from TB group by S
->[{S:Glasgow,OCC:2,TOTAL:72},{S:Paisley,OCC:1,TOTAL:82}]
// contributed by Fritz Laux
CREATE TABLE people (Id INT(11) NOT NULL, Name VARCHAR(50) , Salary NUMERIC(7,2), country VARCHAR(50), city VARCHAR(50) , PRIMARY KEY (Id) )
/* UK*/
INSERT INTO people(Id, Name, Salary, country, city) VALUES(1, 'Tom', 50000, 'UK', 'London')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(2, 'Alex', 60000, 'UK', 'London')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(3, 'Bob', 66000, 'UK', 'London')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(4, 'Anne', 62000, 'UK', 'London')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(5, 'Pam', 72000, 'UK', 'London')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(6, 'Liz', 52000, 'UK', 'London')

INSERT INTO people(Id, Name, Salary, country, city) VALUES(7, 'Anne', 62000, 'UK', 'Glasgow') 
INSERT INTO people(Id, Name, Salary, country, city) VALUES(8, 'Claire', 62000, 'UK', 'Glasgow')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(9, 'Marc', 58000, 'UK', 'Glasgow')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(10, 'Carla', 62000, 'UK', 'Glasgow')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(11, 'Mary', 64000, 'UK', 'Glasgow')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(12, 'Martha', 63000, 'UK', 'Glasgow')

INSERT INTO people(Id, Name, Salary, country, city) VALUES(20, 'Mike', 62000, 'UK', 'Liverpool')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(21, 'Paul', 62000, 'UK', 'Liverpool')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(22, 'John', 62000, 'UK', 'Liverpool')

/* Germany*/
INSERT INTO people(Id, Name, Salary, country, city) VALUES(61, 'Tom', 50000, 'GER', 'Berlin')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(62, 'Alex', 60000, 'GER', 'Berlin')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(63, 'Bob', 66000, 'GER', 'Berlin')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(64, 'Anne', 62000, 'GER', 'Berlin')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(65, 'Pam', 72000, 'GER', 'Berlin')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(66, 'Liz', 52000, 'GER', 'Berlin')

INSERT INTO people(Id, Name, Salary, country, city) VALUES(67, 'Anne', 62000, 'GER', 'Munich')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(68, 'Claire', 62000, 'GER', 'Munich')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(69, 'Marc', 58000, 'GER', 'Munich')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(70, 'Carla', 62000, 'GER', 'Munich')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(71, 'Mary', 64000, 'GER', 'Munich')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(72, 'Martha', 63000, 'GER', 'Munich')

INSERT INTO people(Id, Name, Salary, country, city) VALUES(80, 'Mike', 62000, 'GER', 'Tuebingen')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(81, 'Paul', 62000, 'GER', 'Tuebingen')
INSERT INTO people(Id, Name, Salary, country, city) VALUES(82, 'John', 62000, 'GER', 'Tuebingen')

/* Queries */
select city, avg(Salary), count(*) as numPeople from people where country = 'GER' group by city having count(*) > 4
// MariaDB examples
CREATE TABLE students ("name" CHAR, test CHAR, score INT)
[INSERT INTO students VALUES('Chun', 'SQL', 75), ('Chun', 'Tuning', 73),
 ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31),
 ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88),
 ('Tatiana', 'SQL', 87), ('Tatiana', 'Tuning', 83)]
[SELECT "name", test, score, AVG(score) OVER (PARTITION BY test) AS average_by_test,
  AVG(score) OVER (PARTITION BY "name") AS average_by_name FROM students]
->[{name:'Chun',TEST:'SQL',SCORE:75,AVERAGE_BY_TEST:65.25,AVERAGE_BY_NAME:74},
{name:'Chun',TEST:'Tuning',SCORE:73,AVERAGE_BY_TEST:68.75,AVERAGE_BY_NAME:74},
{name:'Esben',TEST:'SQL',SCORE:43,AVERAGE_BY_TEST:65.25,AVERAGE_BY_NAME:37},
{name:'Esben',TEST:'Tuning',SCORE:31,AVERAGE_BY_TEST:68.75,AVERAGE_BY_NAME:37},
{name:'Kaolin',TEST:'SQL',SCORE:56,AVERAGE_BY_TEST:65.25,AVERAGE_BY_NAME:72},
{name:'Kaolin',TEST:'Tuning',SCORE:88,AVERAGE_BY_TEST:68.75,AVERAGE_BY_NAME:72},
{name:'Tatiana',TEST:'SQL',SCORE:87,AVERAGE_BY_TEST:65.25,AVERAGE_BY_NAME:85}, 
{name:'Tatiana',TEST:'Tuning',SCORE:83,AVERAGE_BY_TEST:68.75,AVERAGE_BY_NAME:85}]
CREATE TABLE users (email CHAR,first_name CHAR, last_name CHAR,  account_type CHAR)
[INSERT INTO users VALUES ('admin@boss.org', 'Admin', 'Boss', 'admin'),
 ('bob.carlsen@foo.bar', 'Bob', 'Carlsen','regular'),
 ('eddie.stevens@data.org', 'Eddie', 'Stevens', 'regular'),
 ('john.smith@xyz.org', 'John', 'Smith','regular'),
 ('root@boss.org', 'Root', 'Chief', 'admin')]
[SELECT row_number() OVER (PARTITION BY account_type ORDER BY email) AS rnum,
  email, first_name, last_name, account_type FROM users]
->[{RNUM:1,EMAIL:admin@boss.org',FIRST_NAME:'Admin',LAST_NAME:'Boss',ACCOUNT_TYPE:'admin'},            {RNUM:1,EMAIL:'bob.carlsen@foo.bar',FIRST_NAME:'Bob',LAST_NAME:'Carlsen',ACCOUNT_TYPE:'regular'},              {RNUM:2,EMAIL:'eddie.stevens@data.org',FIRST_NAME:'Eddie',LAST_NAME:'Stevens',ACCOUNT_TYPE:'regular'},                {RNUM:3,EMAIL:'john.smith@xyz.org',FIRST_NAME:'John',LAST_NAME:'Smith',ACCOUNT_TYPE:'regular'},
{RNUM:2,EMAIL:root@boss.org',FIRST_NAME:'Root',LAST_NAME:'Chief',ACCOUNT_TYPE:'admin'}]
/* LearnSQL examples */
create table employee(employee_id int,full_name char,Department char,salary numeric(8,2))
[insert into employee values(100,'Mary Johns','SALES',1000.00),
(101,'Sean Moldy','IT',1500.00),(102,'Peter Dugan','SALES',2000.00),
(103,'Lilian Penn','SALES',1700.00),(104,'Milton Kowarsky','IT',1800.00),
(105,'Mareen Bisset','ACCOUNTS',1200.00),(106,'Airton Graue','ACCOUNTS',1100.00)]
[select rank() over (partition by department order by salary desc) as dept_ranking,
department,employee_id,full_name,salary from employee]
8:
create table JA(B int,C int,D int)
insert into JA values(4,2,43)
insert into JA values(8,3,82)
insert into JA values(7,4,29)
create table JE(F int,C int,G int)
insert into JE values(4,3,22)
insert into JE values(11,4,10)
insert into JE values(7,2,31)
select * from JA,JE
select * from JA natural join JE
->[{B:4,C:2,D:43,F:7,G:31},{B:8,C:3,D:82,F:4,G:22},{B:7,C:4,D:29,F:11,G:10}]
select D,G from JA cross join JE where D<G
select B,D,G from JA, JE where B=F
select B,D,G from JA H, JE where H.C=JE.C
select * from JA inner join JE on B=F
select * from JA left join JE on B=F
select * from JA right join JE on B=F
select * from JA full join JE on B=F
select sum(c),g from JA natural join JE group by g
-> [{SUM:4,G:10},{SUM:3,G:22},{SUM:2,G:31}]
select sum(f),g from JA natural join JE where c=2 group by g
-> [{SUM:7,G:31}]
select c,sum(f),g from JA natural join JE group by g,c having sum(f)<6
-> [{C:3,SUM:4,G:22}]
select c,sum(d),sum(f),g from JA natural join JE group by g,c
-> [{C:2,SUM:43,Col2:7,G:31},
{C:3,SUM:82,Col2:4,G:22},
{C:4,SUM:29,Col2:11,G:10}]
create table SalesPerson(pid int primary key)
insert into SalesPerson values(1),(2),(3)
create table Sales(sid int primary key, spid int, cust int, amount int)
insert into Sales values(4,3,10,22),(5,2,11,12),(6,2,10,37)
insert into Sales values(7,1,12,7),(8,3,13,41),(9,1,12,17)
[select * from SalesPerson,
(select cust, amount from Sales where spid = pid
order by amount desc fetch first 1 rows only)]
->[{PID:1,CUST:12,AMOUNT:17}],[{PID:2,CUST:10,AMOUNT:37}],[{PID:3,CUST:13,AMOUNT:41}]");
8A:
create table JA(B int primary key,C int,D int)
insert into JA values(4,2,43)
insert into JA values(8,3,82)
insert into JA values(7,4,29)
create table JE(F int references JA,C int primary key,G int)
insert into JE values(4,3,22)
insert into JE values(7,2,31)
select * from JA,JE
select * from JA natural join JE
select D,G from JA cross join JE where D<G
select B,D,G from JA, JE where B=F
select B,D,G from JA H, JE where H.C=JE.C
select * from JA inner join JE on B=F
select * from JA left join JE on B=F
select * from JA right join JE on B=F
select * from JA full join JE on B=F
9:
create table ba(b int,c real,d numeric)
insert into ba values(12345678901234567890123456789,123.4567,0.1234)
insert into ba values(0,123.4567e-15,1234)
insert into ba values(12,1234.0,0.00045)
insert into ba values(34,0.5678e9,0)
select * from ba
10:
create table RWC(A int primary key,B char,C int)
create table RRC(D char primary key,E int references RWC)
delete from RWC
insert into RWC values(42,'Life, the Universe',1)
insert into RWC values(52,'Weeks in the year',2)
insert into RRC values('Douglas Adams',42)
begin transaction
select * from RWC where A=42
10A 106: 
update RWC set B='the product of 6 and 9' where A=42
10 contd:
commit
-> Transaction conflict: record 274 Update 274[23]
begin transaction
select * from RWC where A=52
10B 108:
update RWC set B='the product of 6 and 7' where A=42
10 contd:
commit
update RWC set C=3 where A=42
begin transaction
select * from RRC
10A 112:
update RWC set B='the product of 6 and 9' where A=42
10 contd:
commit
begin transaction
update RWC set C=3 where A=52
10C 115:
update RWC set C=4 where A=52
10 contd:
commit
 -> Transaction conflict: record 333 has just been updated
begin transaction
select * from RWC
10B 116:
update RWC set B='the product of 6 and 7' where A=42
10 contd:
commit
 -> Transaction conflict: record 274 update
begin transaction
insert into RWC values(13,'Lucky for some',4)
10D 118:
insert into RWC values(13, 'Bakers dozen', 5)
10 contd:
commit
 -> Transaction conflict: Conflicting record
begin transaction
delete from RWC where a=52
10E 120:
update RRC set E=52 where D='Douglas Adams'
10 contd:
commit
 -> Transaction conflict: A new reference conflicts with delete
begin transaction
update RRC set E=42 where D='Douglas Adams'
10F 122:
delete from RWC where A=42
10 contd:
commit
 -> Transaction conflict: A delete conflicts with update
begin transaction
update RWC set A=12,B='Dozen' where A=13
10G 124:
insert into RWC values (12,'Dozen',6)
10 contd:
commit
 -> Transaction conflict: Conflicting record Update
delete from RWC where A=12
begin transaction
insert into RWC values (12,'Dozen',7)
10H 127:
update RWC set A=12,B='Dozen' where A=13
10 contd:
commit
 -> Transaction conflict: Conflicting record Record
insert into RWC values (13,'Black Friday',6)
begin transaction
delete from RWC where A=13
10I 133
insert into RRC values ('Last Supper',13)
10 contd:
commit
-> Transaction conflict: A new reference conflicts with deletion
11:
create table cs(b int not null,c int default 4,d int generated always as b+c)
insert into cs(c) values(5)
 -> Null value not allowed in column B
insert into cs(b) values(3)
insert into cs values(1,2,3)
 -> Attempt to assign to a non-updatable column
select * from cs
12:
create table sce(a int,b char)
insert into sce values(12,'Zodiac')
insert into sce values(13,'Bakers')
insert into sce values(14,'Fortnight')
create table dst(c int)
insert into dst (select a from sce where b<'H')
select * from dst
select a from sce where b in('Fortnight','Zodiac')
->[{A:12},{A:14}]
select * from dst where c in (select a from sce where b='Bakers')
->[{C:13}]
insert into dst(c) (select max(x.a)+4 from sce x where x.b<'H')
select * from dst
->[{C:13},{C:14},{C:18}]
insert into dst (select min(x.c)-3 from dst x)
table dst
-> 13 14 18 10
create table p(q int primary key,r char,a int)
create view v as select q,r as s,a from p
insert into v(s) values('Twenty'),('Thirty')
update v set s='Forty two' where q=1
select q,s from v
->[{Q:1,S:'Forty two'},{Q:2,R:'Thirty'}]
select r from p
->[{R:'Forty two'},{R:'Thirty'}]
delete from v where s='Thirty'
select * from p
->[{Q:1,R:'Forty two',A:}]
insert into p(r) values('Fifty')
create table t(s char,u int)
insert into t values('Forty two',42),('Fifty',48)
create view w as select * from t natural join v
update w set u=50,a=21 where q=2
table p
->[{Q:1,R:'Forty two',A:},{Q:2,'R:'Fifty',A:21}]
table t
->[{S:'Forty two',U:42},{S:'Fifty',U:50}]
create table umsatz (kunde char(12) primary key, KdUmsatz numeric(8,2))
insert into umsatz values ('Bosch' , 17000.00),('Boss' ,  13000.00), ('Daimler',20000.00)
insert into umsatz values ('Siemens', 9000.00),('Porsche', 5000.00), ('VW'     , 8000.00), ('Migros' , 4000.00)
[CREATE VIEW umsatz_V(kunde, KdUmsatz, runningSalesShare)
 AS SELECT kunde, KdUmsatz,
  (SELECT SUM(KdUmsatz) FROM umsatz WHERE KdUmsatz >= u.KdUmsatz) /
   (SELECT SUM(KdUmsatz) FROM umsatz)
FROM umsatz AS u]
[SELECT CASE WHEN runningSalesShare <= 0.5 THEN 'A' 
  WHEN runningSalesShare > 0.5  AND 
   runningSalesShare <= 0.85 THEN 'B' 
  WHEN runningSalesShare > 0.85 THEN 'C' 
  ELSE NULL 
  END AS Category,
 kunde, KdUmsatz,
 CAST(CAST(KdUmsatz / (SELECT SUM(KdUmsatz) FROM umsatz_V) * 100 
   as decimal(6, 2))
  as char(6)) || ' %' AS share 
FROM umsatz_V 
ORDER BY KdUmsatz DESC]
->[{CATEGORY:'A',KUNDE:'Daimler',KDUMSATZ:20000.00,SHARE:'26.32 %'},
{CATEGORY:'A',KUNDE:'Bosch',KDUMSATZ:17000.00,SHARE:'22.37 %'},
{CATEGORY:'B',KUNDE:'Boss',KDUMSATZ:13000.00,SHARE:'17.11 %'},
{CATEGORY:'B',KUNDE:'Siemens',KDUMSATZ:9000.00,SHARE:'11.84 %'},
{CATEGORY:'C',KUNDE:'VW',KDUMSATZ:8000.00,SHARE:'10.53 %'},
{CATEGORY:'C',KUNDE:'Porsche',KDUMSATZ:5000.00,SHARE:'6.58 %'},
{CATEGORY:'C',KUNDE:'Migros',KDUMSATZ:4000.00,SHARE:'5.26 %'}]
13:
create table ad(a int,b char)
insert into ad values(20,'Twenty')
alter table ad add c char not null
alter table ad alter c set default 'XX'
insert into ad(a,b) values(2,'Two')
select * from ad
->[{A:20,B:'Twenty'},{A:2,B:'Two',C:'XX'}]
alter table ad drop b
select * from ad
->[{A:20},{A:2,C:'XX'}]
alter table ad add primary key(a)
insert into ad values(21,'AB')
create table de (d int references ad)
insert into de values(14)
 -> Integrity constraint: foreign key DE(14)
insert into de values(21)
delete from ad where c='AB'
 -> Integrity constraint: RESTRICT - foreign key in use
drop ad
 -> RESTRICT: Index 271 referenced in Index 380 
drop de cascade
alter table ad drop primary key(a)
select * from ad
->[{A:20},{A:2,C:'XX'},{A:21,C:'AB'}]
insert into ad(a) values(13)
select * from ad
->[{A:20},{A:2,C:'XX'},{A:21,C:'AB'},{A:13,C:'XX'}]
drop ad
select * from ad
 -> Table AD undefined
14: 
create table fi(a int primary key,b char)
create table se(c char primary key, d int references fi on delete cascade)
insert into fi values (1066,'invasion'),(1953,'accession'),(2019,'brexit')
insert into se values ('disaster',2019),('elizabeth',1953),('johnson',2019)
insert into se values ('normans',1066),('hastings',1066)
delete from fi where a=1066
table se
  -> [{C:'disaster',D:2019},{C:'elizabeth',D:1953},{C:'johnson',D:2019}]
alter table se set (d) references fi on delete restrict
delete from fi where a=2019
  -> Integrity constraint: RESTRICT
alter table se set (d) references fi on delete set null on update cascade
update fi set a=2020 where a=2019
table se
  -> [{C:'disaster',D:2020},{C:'elizabeth',D:1953},{C:'johnson',D:2020}]
delete from fi where a=2020
table se
  -> [{C:'disaster'},{C:'elizabeth',D:1953},{C:'johnson'}]
15:
create table ca(a char,b int check (b>0))
insert into ca values('Neg',-99)
  -> Column B check constraint fails
insert into ca values('Pos',45)
table ca
  -> [{A:'Pos',B:45}]
16:
create table xa(b int,c int,d char)
create table xb(tot int)
insert into xb values (0)
[create trigger ruab before update on xa referencing old as mr new as nr
for each row begin atomic update xb set tot=tot-mr.b+nr.b; set d='changed' end]
[create trigger riab before insert on xa 
for each row begin atomic set c=b+3; update xb set tot=tot+b end]
insert into xa(b,d) values (7,'inserted')
insert into xa(b, d) values(9, 'Nine')
table xa
  -> [{B:7,C:10,D:'inserted'},{B:9,C:12,D:'Nine'}]
table xb
  -> [{TOT:16}]
update xa set b=8,d='updated' where b=7
table xa
  -> [{B:8,C:10,D:'changed'},{B:9,C:12,D:'Nine'}]
table xb
  -> [{TOT:17}]
create table xc(totb int,totc int)
[create trigger rdai instead of delete on xa referencing old table as ot for each row 
begin atomic update ot set d='deleted' end]
[create trigger sdai instead of delete on xa referencing old table as ot for each statement 
begin atomic insert into xc (select b,c from ot) end]
delete from xa where d='changed'
table xa
 -> [{B:8,C:10,D:'changed'},{B:9,C:12,D:'Nine'}]
table xc
  -> [{TOTB:8,TOTC:10}]
17:
[create function reverse(a char) returns char 
  if char_length(a)<=1 then return a 
  else return reverse(substring(a from 1 for char_length(a)-1))
             ||substring(a from 0 for 1) 
  end if]
select reverse('Fred')
  -> [{Col0:'derF'}]
18:
create table author(id int primary key,aname char)
create table book(id int primary key,authid int references author,title char)
insert into author values (1,'Dickens'),(2,'Conrad')
insert into book(authid,title) values (1,'Dombey & Son'),(2,'Lord Jim'),(1,'David Copperfield')
[create function booksby(auth char) returns table(title char)
  return table (select title from author inner join book b on author.id=b.authid where aname=booksby.auth)]
select title from author inner join book b on author.id=b.authid where aname='Dickens'
  -> [{TITLE:'Dombey & Son'},{TITLE:'David Copperfield'}]
select * from table(booksby('Dickens'))
  -> [{TITLE:'Dombey & Son'},{TITLE:'David Copperfield'}]
select count(*) from table(booksby('Dickens'))
  -> [{COUNT:2}]
19:
create table ga(a1 int primary key,a2 char)
insert into ga values(1,'First'),(2,'Second')
[create function gather1() returns char 
 begin declare c cursor for select a2 from ga;
  declare done Boolean default false;
  declare continue handler for sqlstate '02000' set done=true;
  declare a char default '';
  declare p char;
  open c;
  repeat
   fetch c into p; 
   if not done then 
    if a='' then 
     set a=p 
    else 
     set a=a||', '||p 
    end if
   end if
  until done end repeat;
  close c;
  return a end]
select gather1()
  -> [{Col0:'First, Second'}]
[create function gather2() returns char 
  begin declare b char default '';
   for select a2 from ga do 
    if b='' then 
     set b=a2 
    else 
     set b=b||', '||a2 
    end if 
   end for;
   return b end]
select gather2()
  -> [{Col0:'First, Second'}]
20:
create type point as (x int, y int)
create type size as (w int,h int)
create type line as (strt point,en point)
[create type rect as (tl point,sz size) 
  constructor method rect(x1 int,y1 int, x2 int, y2 int),
  method centre() returns point]
create table figure(id int primary key,title char)
create table figureline(id int primary key,fig int references figure,what line)
create table figurerect(id int primary key,fig int references figure,what rect)
[create constructor method rect(x1 int,y1 int,x2 int,y2 int) 
  begin tl=point(x1,y1); sz=size(x2-x1,y2-y1) end]
[create method centre() returns point for rect 
  return point(tl.x+sz.w/2,tl.y+sz.h/2)]
[create function centrerect(a int) returns point 
  return (select what.centre() from figurerect where id=centrerect.a)]
insert into figure values(1,'Diagram')
insert into figurerect values(1,1,rect(point(1,2),size(3,4)))
insert into figurerect values(2,1,rect(4,5,6,7))
insert into figureline values(1,1,line(centrerect(1),centrerect(2)))
select what from figureline
  -> [{WHAT:LINE(STRT=POINT(X=2,Y=4),EN=POINT(X=5,Y=6))}]
21:
create table members (id int primary key,firstname char)
[create table played (id int primary key, winner int references members, 
  loser int references members,agreed boolean)]
grant select on members to public
grant select on played to public
[create procedure claim(won int,beat int) 
  insert into played(winner,loser) values(claim.won,claim.beat)]
[create procedure agree(p int) 
  update played set agreed=true 
   where winner=agree.p and loser in
    (select m.id from members m where user like '%'||firstname escape '^')]
insert into members(firstname) values(user)
select id from members where user like '%'||firstname escape'^'
  -> [{ID:1}]
insert into members(firstname) values('Fred')
insert into played(winner,loser) values(2,1)
create role admin
create role membergames
grant execute on procedure claim(int,int) to role membergames
grant execute on procedure agree(int) to role membergames
grant membergames to public
set role membergames
call agree(2)
call claim(1,2)
set role admin
table played
  -> [{ID:1,WINNER:2,LOSER:1,AGREED:true},{ID:2,WINNER:1,LOSER:2}]
22: 
A> create table D(e int primary key,f char,g char)
A> insert into D values (1,'Joe','Soap'), (2,'Betty','Boop')
A> create role A
A> grant A to "MALCOLM1\Malcolm"
B> begin transaction
B> create view WU of (e int, f char, g char) as get etag url 'http://localhost:8180/A/A/D'
B> select * from wu
 -> [{E:1,F:'Joe',G:'Soap'},{E:2,F:'Betty',G:'Boop'}]
B> create table HU (e int primary key, k char, m int)
B> insert into HU values (1,'Cleaner',12500), (2,'Manager',31400)
B> create view VU as select * from wu natural join HU
B> select e, f, m from VU where e=1
 -> [{E:1,F:'Joe',M:12500}]
B> insert into wu values(3,'Fred','Bloggs')
B> select * from wu
 -> [{E:1,F:'Joe',G:'Soap'},{E:2,F:'Betty',G:'Boop'},{E:3,F:'Fred',G:'Bloggs'}]
B> update vu set f='Elizabeth' where e=2
B> select * from wu where e=2
 -> [{E:2,F:'Elizabeth',G:'Boop'}]
23:
Reset A:> delete from D
Reset A:> insert into D values (1,'Joe','Soap'), (2,'Betty','Boop')
B> create view WW of (e int, f char, g char) as get etag 'http://localhost:8180/A/A/D'
B> select * from ww
 -> [{E:1,F:'Joe',G:'Soap'},{E:2,F:'Betty',G:'Boop'}]
B> create table H (e int primary key, k char, m int)
B> insert into H values (1,'Cleaner',12500), (2,'Manager',31400)
B> create view VV as select * from ww natural join H
B> select e, f, m from VV where e=1
 -> [{E:1,F:'Joe',M:12500}] 
B> insert into ww values(3,'Fred','Bloggs')
B> select * from ww
 -> [{E:1,F:'Joe',G:'Soap'},{E:2,F:'Betty',G:'Boop'},{E:3,F:'Fred',G:'Bloggs'}] 
B> update vv set f='Elizabeth' where e=2
B> select * from ww where e=2
 -> [{E:2,F:'Elizabeth',G:'Boop'}] 
Reset A>
B> begin transaction
B> select * from ww where e=2
A291> update d set f='Liz' where e=2
B> commit
 -> ETag validation failure
Reset A>
B> begin transaction
B> select * from ww where e=2
A292> delete from d where e=2
B> commit
 -> ETag validation failure
Reset A>
B> begin transaction
B> select * from ww where e=1
A295> update d set f='Liz' where e=2
B> commit
B> select * from ww
 -> [{E:1,F:'Joe',G:'Soap'},{E:2,F:'Liz',G:'Boop'}]
Reset A>
B> begin transaction
B> select * from ww where e=1
A298> delete from d where e=2 
B> commit
B> select * from ww
 -> [{E:1,F:'Joe',G:'Soap'}]
Reset A>
B> begin transaction
B> update ww set f='Liz' where e=2
A300> update d set f='Eliza' where e=2
B> commit
 -> ETag validation failure
Reset A>
B> begin transaction
B> insert into ww values (3,'Fred','Bloggs')
A302> insert into d values (3,'Anyone','Else')
B> commit
  -> Integrity constraint
Reset A>
B> begin transaction
B> update ww set f='Liz' where e=2
A304> delete from d where e=2
B> commit
  -> ETag validation failure
Reset A>
B> begin transaction
B> delete from ww where e=2
A306> update d set f='Eliza' where e=2
B> commit
-> ETag validation failure
Reset A>
B> begin transaction
B> delete from ww where e=2
A308> delete from d where e=2
B> commit
-> ETag validation failure
Reset A>
B> begin transaction
B> update ww set f='Joseph' where e=1
A310> update d set f='Eliza' where e=2
B> commit
B> select * from ww
 -> [{E:1,F:'Joseph',G:'Soap'},{E:2,F:'Eliza',G:'Boop'}]
Reset A>
B> begin transaction
B> insert into ww values (4,'Some','Other')
A313> insert into d values (3,'Anyone','Else')
B> commit
B> select * from ww
 -> [{E:1,F:'Joe',G:'Soap'},{E:2,F:'Betty',G:'Boop'}, 15{E:3,F:'Anyone',G:'Else'},{E:4,F:'Some',G:'Other'}]
Reset A>
B> begin transaction
B> update ww set f='Joseph' where e=1
A316> delete from d where e=2
B> commit
B> select * from ww
 -> [{E:1,F:'Joseph',G:'Soap'}] 
Reset A>
B> begin transaction
B> delete from ww where e=2
A319> update d set f='Joseph' where e=1
B> commit
B> select * from ww
 -> [{E:1,F:'Joseph',G:'Soap'}] 
24:
.DB
create table T(E int,F char)
insert into T values(3,'Three'),(6,'Six'),(4,'Vier'),(6,'Sechs')
create role DB
grant DB to "MALCOLM1\Malcolm"
.DC
create table U(E int,F char)
insert into U values(5,'Five'),(4,'Four'),(8,'Ate')
create role DC
grant DC to "MALCOLM1\Malcolm"
.B
create view VV of (E int,F char) as get 'http://localhost:8180/DB/DB/t'
create table VU (d char primary key, k int, u char)
insert into VU values('B',4,'http://localhost:8180/DB/DB/t')
insert into VU values('C',1,'http://localhost:8180/DC/DC/u')
create view WW of (E int, D char, K int, F char) as get using VU
create table M (e int primary key, n char, unique(n))
insert into M values (2,'Deux'),(3,'Trois'),(4,'Quatre')
insert into M values (5,'Cinq'),(6,'Six'),(7,'Sept')
select * from vv
->[{E:3,F:'Three'},{E:6,F:'Six'},{E:4,F:'Vier'},{E:6,F:'Sechs'}]
select * from VV where e=6
->[{E:6,F:'Six'},{E:6,F:'Sechs'}]
select * from ww
->[{E:3,D:'B',K:4,F:'Three'},{E:6,D:'B',K:4,F:'Six'},{E:4,D:'B',K:4,F:'Vier'},{E:6,D:'B',K:4,F:'Sechs'},
{E:5,D:'C',K:1,F:'Five'},{E:4,D:'C',K:1,F:'Four'},{E:8,D:'C',K:1,F:'Ate'}]
select * from ww where e<6
->[{E:3,D:'B',K:4,F:'Three'},
{E:4,D:'B',K:4,F:'Vier'},{E:5,D:'C',K:1,F:'Five'},{E:4,D:'C',K:1,F:'Four'}]
select * from ww where k=1
[{E:5,D:'C',K:1,F:'Five'},{E:4,D:'C',K:1,F:'Four'},{E:8,D:'C',K:1,F:'Ate'}]
select count(e) from ww
->[{COUNT:7}]
select count(*) from ww
->[{COUNT:7}]
select max(f) from ww
->[{MAX:'Vier'}]
select max(f) from ww where e>4
->[{MAX:'Six'}]
select count(*) from ww where k>2
->[{COUNT:4}]
select min(f) from ww
->[{MIN:'Ate'}]
select sum(e)*sum(e),d from ww group by d
->[{Col0:361,D:'B'},{Col0:289,D:'C'}]
select count(*),k/2 as k2 from ww group by k2
->[{COUNT:3,K2:0},{COUNT:4,K2:2}]
select avg(e) from ww
->[{AVG:5.142857142857}]
select f,n from ww natural join m
->[{F:'Three',N:'Trois'},
{F:'Vier',N:'Quatre'},{F:'Four',N:'Quatre'},{F:'Five',N:'Cinq'},
{F:'Six',N:'Six'},{F:'Sechs',N:'Six'}]
select e+char_length(f) as x,n from ww natural join m
->[{Col0:8,N:'Trois'},{Col0:8,N:'Quatre'},
{Col0:8,N:'Quatre'},{Col0:9,N:'Cinq'},
{Col0:9, N::'Six'},{Col0:11,N:'Six'}]
select char_length(f)+char_length(n) from ww natural join m
->[{Col0:10},{Col0:10},{Col0:10},{Col0:8},{Col0:6},{Col0:8}]
select sum(e)+char_length(max(f)) from ww
->[{Col0:40}]
select count(*),e+char_length(f) as x from ww group by x
->[{COUNT:3,X:8},{COUNT:2,X:9},{COUNT:1,X:11}]
select count(*),e+char_length(n) as x from ww natural join m group by x
->[{COUNT:1,X:8},{COUNT:3,X:9}],{COUNT:2,X:10}
select sum(e)+char_length(f),f  from ww natural join m group by f
->{Col0:9,F:'Five'},{Col0:8,F:'Four'},{Col0:11,'F:'Sechs'},{Col0:9,F:'Six'},[{Col0:8,F:'Three'},{Col0:8,F:'Vier'}]
[select sum(char_length(f))+char_length(n) as x,n from ww natural join m group by n]
->
[{X:8,N:'Cinq'},{X:14,N:'Quatre'},{X:11,N:'Six'},{X:10,N:'Trois'}]
Select count(*) from ww natural join m
->[{COUNT:6}]
update vv set F='Tri' where E=3
insert into VV values (9,'Nine')
select * from vv
->[{E:3,F:'Tri'},{E:6,F:'Six'}, {E:4,F:'Vier'},{E:6,F:'Sechs'},{E:9,F:'Nine'}]
update ww set f='Eight' where e=8
insert into ww(D,E,F) values('B',7,'Seven')
select * from vv
[{E:3,F:'Tri'},{E:6,F:'Six'},{E:4,F:'Vier'},{E:6,F:'Sechs'},{E:9,F:'Nine'},
{E:7,F:'Seven'}]
select * from WW
->[{E:3,D:'B',K:4,F:'Three'},{E:6,D:'B',K:4,F:'Six'},{E:4,D:'B',K:4,F:'Vier'},{E:6,D:'B',K:4,F:'Sechs'},{E:9,D:'B',K:4,F:'Nine'},
{E:7,D:'B',K:4,F:'Seven'},
{E:5,D:'C',K:1,F:'Five'},
{E:4,D:'C',K:1,F:'Four'},
{E:8,D:'C',K:1,F:'Eight'}]
delete from wW where E=7
update vv set f='Ate' where e=8
select * from vv
->[{E:3,F:'Tri'},{E:6,F:'Six'},{E:4,F:'Vier'},{E:6,F:'Sechs'},{E:9,F:'Nine'}]
select * from ww
->[{E:3,D:'B',K:4,F:'Tri'},{E:6,D:'B',K:4,F:'Six'},{E:4,D:'B',K:4,F:'Vier'},{E:6,D:'B',K:4,F:'Sechs'},
{E:9,D:'B',K:4,F:'Nine'},{E:5,D:'C',K:1,F:'Five'},{E:4,D:'C',K:1,F:'Four'},{E:8,D:'C',K:1,F:'Eight'}]
25:
create type student as (matric char) nodetype
insert into student values ('Fred','22/456')
create type person nodetype
alter type student set under person
create type staff under person as (title char)
insert into staff values ('Anne','Prof')
select *,specifictype() from person
create type married edgetype(bride=person,groom=person)
insert into person values('Joe'),('Mary')
insert into married(bride,groom) values('Mary','Fred')
select id from married where groom='Fred'
select count(*) from married where 'Fred'=groom
match ("Fred")<-[:married]-(_x)
create type product nodetype
[CREATE
(Joe:Customer {"Name":'Joe Edwards', Address:'10 Station Rd.'}),
(Joe)-[:Ordered {"Date":date'22/11/2002'} ]-> (Ord201:"Order")-[:Item {Qty: 5}]->("16/8x100" : WoodScrew : Product),
(Ord201)-[:Item {Qty: 5}]->("Fibre 12cm": WallPlug : Product),
(Ord201)-[:Item {Qty: 1}]->("500ml" : RubberGlue : Product)]
match (_)-[:Item {Qty:_A}]->(_X:_T) where A>4
